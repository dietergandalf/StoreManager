version: '3.8'

services:
    database:
        image: postgres:latest
        hostname: postgresdb
        restart: always
        env_file: .env
        ports:
            - 15432:5432
        volumes:
            - postgresdb:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - app-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 30s
            timeout: 10s
            retries: 5
    backend:
        build: ./backend/store-manager
        env_file: .env
        ports:
            - "9080:8080"
            - "35729:35729"  # LiveReload port for Spring Boot DevTools
        depends_on:
            database:
                condition: service_healthy
        environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/${POSTGRES_DB}
            - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
            - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
            - DB_USERNAME=${POSTGRES_USER}
            - DB_PASSWORD=${POSTGRES_PASSWORD}
            - SPRING_DEVTOOLS_RESTART_ENABLED=true
            - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
        volumes:
            - ./backend/store-manager/src:/app/src  # Mount source code for live reload
        networks:
            - app-network
    
    frontend:
        build: ./frontend
        env_file: .env
        ports:
            - "3000:3000"
        environment:
            - REACT_APP_API_BASE_URL=http://localhost:9080
            - CHOKIDAR_USEPOLLING=true  # For hot reload in Docker
            - WATCHPACK_POLLING=true    # Additional polling for webpack
        volumes:
            - ./frontend/src:/app/src
            - ./frontend/public:/app/public
            - ./frontend/package.json:/app/package.json
            - /app/node_modules  # Prevent node_modules from being overwritten
        networks:
            - app-network
        depends_on:
            - backend

networks:
    app-network:
        driver: bridge

volumes:
    postgresdb:
        driver: local
